
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.security.MessageDigest;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import java.sql.SQLException;
import java.util.Random;

/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
/**
 *
 * @author adaobi
 */
public class Reset extends javax.swing.JFrame {

    String StaffID;

    private static String generateRandomPassword() {
        int length = 8;
        String characters = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789";
        Random random = new Random();
        StringBuilder password = new StringBuilder();

        for (int i = 0; i < length; i++) {
            password.append(characters.charAt(random.nextInt(characters.length())));
        }

        return password.toString();
    }

    private static String hashPassword(String password) {
        try {
            MessageDigest digest = MessageDigest.getInstance("SHA-256");
            byte[] hash = digest.digest(password.getBytes());

            // Convert the byte array to a hexadecimal string
            StringBuilder hexString = new StringBuilder();
            for (byte b : hash) {
                String hex = Integer.toHexString(0xff & b);
                if (hex.length() == 1) {
                    hexString.append('0');
                }
                hexString.append(hex);
            }

            return hexString.toString();
        } catch (Exception e) {
            e.printStackTrace();
            return null;
        }
    }

    /**
     * Creates new form Reset
     */
    public Reset() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel2 = new javax.swing.JPanel();
        jTextField7 = new javax.swing.JTextField();
        jButton7 = new javax.swing.JButton();
        jButton6 = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        jButton15 = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jButton5 = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanel2.setLayout(null);
        jPanel2.add(jTextField7);
        jTextField7.setBounds(310, 30, 403, 22);

        jButton7.setText("RESET PASSWORD");
        jButton7.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton7ActionPerformed(evt);
            }
        });
        jPanel2.add(jButton7);
        jButton7.setBounds(810, 360, 140, 40);

        jButton6.setText("ENTER");
        jButton6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton6ActionPerformed(evt);
            }
        });
        jPanel2.add(jButton6);
        jButton6.setBounds(800, 30, 72, 23);

        jLabel2.setForeground(new java.awt.Color(255, 255, 255));
        jLabel2.setText("SEARCH");
        jPanel2.add(jLabel2);
        jLabel2.setBounds(190, 26, 80, 20);

        jButton15.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagesandicons/icons8-view-50.png"))); // NOI18N
        jButton15.setText("VIEW ALL");
        jButton15.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton15ActionPerformed(evt);
            }
        });
        jPanel2.add(jButton15);
        jButton15.setBounds(470, 360, 140, 40);

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "StaffID", "FirstName", "Surname", "Department", "DOB", "Gender", "PhoneNumber", "Email", "Password"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                true, true, true, false, true, false, true, true, true
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(jTable1);

        jPanel2.add(jScrollPane1);
        jScrollPane1.setBounds(120, 80, 830, 270);

        jButton5.setText("DELETE");
        jButton5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton5ActionPerformed(evt);
            }
        });
        jPanel2.add(jButton5);
        jButton5.setBounds(120, 360, 110, 40);

        jLabel1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagesandicons/Red Blue & White Remembrance Flower Memorial Day Instagram Post.png"))); // NOI18N
        jPanel2.add(jLabel1);
        jLabel1.setBounds(10, -580, 1080, 1120);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, 1079, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        setSize(new java.awt.Dimension(1082, 529));
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void jButton7ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton7ActionPerformed
        try {
            DefaultTableModel dtm = (DefaultTableModel) jTable1.getModel();
            int selectedRow = jTable1.getSelectedRow();

            if (selectedRow != -1) {
                // Get the unique identifier of the selected row, for example, the StaffID
                Object staffIDObject = dtm.getValueAt(selectedRow, 0);
                String staffIDToUpdatePassword = String.valueOf(staffIDObject);

                // Generate a new random password
                String newPassword = generateRandomPassword();

                // Hash the new password
                String hashedPassword = hashPassword(newPassword);

                // Your code to update the hashed password in each database table
                Connection con = DriverManager.getConnection("jdbc:mysql://localhost:3306/pos", "root", "Nkoli1510");

                // Update 'sales_db' table
                updatePasswordForTable(con, "sales_db", staffIDToUpdatePassword, hashedPassword);

                // Update 'inventory_db' table
                updatePasswordForTable(con, "inventory_db", staffIDToUpdatePassword, hashedPassword);

                // Update 'it_db' table
                updatePasswordForTable(con, "it_db", staffIDToUpdatePassword, hashedPassword);

                // Inform the user that the password has been reset
                JOptionPane.showMessageDialog(rootPane, "Password reset successful. New password: " + newPassword);

                // Close the database connection
                con.close();
            } else {
                // Inform the user that no row is selected
                JOptionPane.showMessageDialog(rootPane, "Please select a row to reset the password.");
            }
        } catch (Exception ex) {
            // Handle any exceptions related to password reset
            ex.printStackTrace();
            JOptionPane.showMessageDialog(rootPane, ex.getMessage());
        }
    }

    private void updatePasswordForTable(Connection con, String tableName, String staffID, String hashedPassword) throws SQLException {
        String updatePasswordQuery = "UPDATE " + tableName + " SET password = ? WHERE StaffID = ?";

        try (PreparedStatement updatePasswordStatement = con.prepareStatement(updatePasswordQuery)) {
            updatePasswordStatement.setString(1, hashedPassword);
            updatePasswordStatement.setString(2, staffID);

            // Execute the update query
            updatePasswordStatement.executeUpdate();
        }
    }//GEN-LAST:event_jButton7ActionPerformed

    private void jButton6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton6ActionPerformed
        try {
            String staffID = jTextField7.getText();
            DefaultTableModel tableModel = (DefaultTableModel) jTable1.getModel();

            // Clear existing rows in the table
            tableModel.setRowCount(0);

            String selectQuery = "SELECT StaffID, firstName, Surname, Department, DOB, Gender, PhoneNumber, Email FROM sales_db WHERE StaffID = ? "
                    + "UNION "
                    + "SELECT StaffID, firstName, Surname, Department, DOB, Gender, PhoneNumber, Email FROM inventory_db WHERE StaffID = ? "
                    + "UNION "
                    + "SELECT StaffID, firstName, Surname, Department, DOB, Gender, PhoneNumber, Email FROM it_db WHERE StaffID = ?";

            Connection connection = DriverManager.getConnection("jdbc:mysql://localhost:3306/pos", "root", "Nkoli1510");
            PreparedStatement preparedStatement = connection.prepareStatement(selectQuery);

            // Set parameters for the staffID in each SELECT statement
            preparedStatement.setString(1, staffID);
            preparedStatement.setString(2, staffID);
            preparedStatement.setString(3, staffID);

            ResultSet resultSet = preparedStatement.executeQuery();

            // Iterate through the result set and add rows to the tableModel
            while (resultSet.next()) {
                //column count
                Object[] row = new Object[8];

                // Replace "columnName1", "columnName2", ... with actual column names
                // row[0] = resultSet.getObject("TableName");
                row[0] = resultSet.getObject("StaffID");
                row[1] = resultSet.getObject("firstName");
                row[2] = resultSet.getObject("Surname");
                row[3] = resultSet.getObject("Department");
                row[4] = resultSet.getObject("DOB");
                row[5] = resultSet.getObject("Gender");
                row[6] = resultSet.getObject("PhoneNumber");
                row[7] = resultSet.getObject("Email");
                // Add more columns as needed

                // Add the row to the tableModel
                tableModel.addRow(row);
            }

        } catch (Exception e) {
            JOptionPane.showMessageDialog(rootPane, e);
        }
    }//GEN-LAST:event_jButton6ActionPerformed

    private void jButton15ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton15ActionPerformed
        try {
            DefaultTableModel tableModel = (DefaultTableModel) jTable1.getModel();

            // Clear existing rows in the table
            tableModel.setRowCount(0);

            String selectQuery = "SELECT StaffID, firstName, Surname, Department, DOB, Gender, PhoneNumber, Email, password FROM sales_db "
                    + "UNION "
                    + "SELECT StaffID, firstName, Surname, Department, DOB, Gender, PhoneNumber, Email, password FROM inventory_db "
                    + "UNION "
                    + "SELECT StaffID, firstName, Surname, Department, DOB, Gender, PhoneNumber, Email,password FROM it_db";

            Connection connection = DriverManager.getConnection("jdbc:mysql://localhost:3306/pos", "root", "Nkoli1510");
            PreparedStatement preparedStatement = connection.prepareStatement(selectQuery);

            // Execute the query and process the results
            ResultSet resultSet = preparedStatement.executeQuery();

            // Iterate through the result set and add rows to the tableModel
            while (resultSet.next()) {
                //column count
                Object[] row = new Object[9];

                row[0] = resultSet.getObject("StaffID");
                row[1] = resultSet.getObject("firstName");
                row[2] = resultSet.getObject("Surname");
                row[3] = resultSet.getObject("Department");
                row[4] = resultSet.getObject("DOB");
                row[5] = resultSet.getObject("Gender");
                row[6] = resultSet.getObject("PhoneNumber");
                row[7] = resultSet.getObject("Email");
                row[8] = resultSet.getObject("password");

                tableModel.addRow(row);
            }
        } catch (Exception e) {
            JOptionPane.showMessageDialog(rootPane, e);
        }
    }//GEN-LAST:event_jButton15ActionPerformed

    private void jButton5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton5ActionPerformed
        try {
            DefaultTableModel dtm = (DefaultTableModel) jTable1.getModel();
            int selectedRow = jTable1.getSelectedRow();

            if (selectedRow != -1) {
                // Get the unique identifier of the selected row, for example, the StaffID
              int staffIDToRemove = (int) dtm.getValueAt(selectedRow, 0);

                // Your code to delete the data from the databases using the StaffID
                Connection con = DriverManager.getConnection("jdbc:mysql://localhost:3306/pos", "root", "Nkoli1510");

                // Delete from the 'sales_db' table
                String deleteSalesQuery = "DELETE FROM sales_db WHERE StaffID = ?";
                try (PreparedStatement deleteSalesStatement = con.prepareStatement(deleteSalesQuery)) {
                    deleteSalesStatement.setInt(1, staffIDToRemove);

                    // Execute the delete query for 'sales_db'
                    int rowsAffectedSales = deleteSalesStatement.executeUpdate();

                    // Delete from the 'inventory_db' table
                    String deleteInventoryQuery = "DELETE FROM inventory_db WHERE StaffID = ?";
                    try (PreparedStatement deleteInventoryStatement = con.prepareStatement(deleteInventoryQuery)) {
                        deleteInventoryStatement.setInt(1, staffIDToRemove);

                        // Execute the delete query for 'inventory_db'
                        int rowsAffectedInventory = deleteInventoryStatement.executeUpdate();

                        // Delete from the 'it_db' table
                        String deleteITQuery = "DELETE FROM it_db WHERE StaffID = ?";
                        try (PreparedStatement deleteITStatement = con.prepareStatement(deleteITQuery)) {
                            deleteITStatement.setInt(1, staffIDToRemove);

                            // Execute the delete query for 'it_db'
                            int rowsAffectedIT = deleteITStatement.executeUpdate();

                            // Check if at least one row is affected in any of the tables
                            if (rowsAffectedSales > 0 || rowsAffectedInventory > 0 || rowsAffectedIT > 0) {
                                // Remove the row from the table model
                                dtm.removeRow(selectedRow);
                                JOptionPane.showMessageDialog(rootPane, "Row deleted successfully from all tables!");
                            } else {
                                JOptionPane.showMessageDialog(rootPane, "Failed to delete row from any table.");
                            }
                        }
                    }
                } catch (Exception e) {
                    // Handle any exceptions that might occur during database operation
                    JOptionPane.showMessageDialog(rootPane, e);
                } finally {
                    // Close the database connection
                    con.close();
                }
            } else {
                // Inform the user that no row is selected
                JOptionPane.showMessageDialog(rootPane, "Please select a row to delete.");
            }
        } catch (Exception e) {
            // Handle any exceptions related to database deletion
            JOptionPane.showMessageDialog(rootPane, e);
        }
    }//GEN-LAST:event_jButton5ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Reset.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Reset.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Reset.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Reset.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Reset().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton15;
    private javax.swing.JButton jButton5;
    private javax.swing.JButton jButton6;
    private javax.swing.JButton jButton7;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTable1;
    private javax.swing.JTextField jTextField7;
    // End of variables declaration//GEN-END:variables
}
