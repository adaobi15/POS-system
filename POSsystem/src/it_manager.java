
import javax.swing.JOptionPane;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.SQLException;
import java.util.Calendar;
import java.util.Date;
import java.util.TimerTask;
import java.util.Timer;
import java.text.SimpleDateFormat;
import java.util.concurrent.TimeUnit;
import java.util.logging.Level;
import java.util.logging.Logger;

/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
/**
 *
 * @author adaobi
 */
public class it_manager extends javax.swing.JFrame {

    private static Timer timer;
    private static String backupTime = "00:00";
    private static boolean isBackupTaskRunning = false;
    /**
     * Creates new form it_manager
     */
    public it_manager() {
        initComponents();
          checkBackupTimeAndTriggerTask();

    }
 private void checkBackupTimeAndTriggerTask() {
        Thread backupThread = new Thread(() -> {
            while (true) {
                // Get the current time
                Calendar currentTime = Calendar.getInstance();
                int currentHour = currentTime.get(Calendar.HOUR_OF_DAY);
                int currentMinute = currentTime.get(Calendar.MINUTE);

                // Check if the current time matches the backup time
                if (currentHour == Integer.parseInt(backupTime.substring(0, 2))
                        && currentMinute == Integer.parseInt(backupTime.substring(3))) {
                    // Check if the backup task is already running to avoid starting multiple instances
                    if (!isBackupTaskRunning) {
                        isBackupTaskRunning = true;
                        BackupTask myTask = new BackupTask();
                        try {
                            myTask.backupDatabase();
                        } catch (Exception ex) {
                            ex.printStackTrace();
                        } finally {
                            isBackupTaskRunning = false;
                        }
                    }
                }

                // Sleep for a short interval before checking again
                try {
                    TimeUnit.MINUTES.sleep(1); // Adjust the interval as needed
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }
            }
        });
        backupThread.start();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabel4 = new javax.swing.JLabel();
        jSpinner1 = new javax.swing.JSpinner();
        jSpinner2 = new javax.swing.JSpinner();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();
        jLabel5 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanel1.setLayout(null);

        jLabel4.setForeground(new java.awt.Color(255, 255, 255));
        jLabel4.setText("SET BACK-UP TIME");
        jPanel1.add(jLabel4);
        jLabel4.setBounds(202, 63, 110, 16);
        jPanel1.add(jSpinner1);
        jSpinner1.setBounds(290, 130, 89, 22);
        jPanel1.add(jSpinner2);
        jSpinner2.setBounds(290, 200, 89, 22);

        jLabel1.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(255, 255, 255));
        jLabel1.setText("HOUR");
        jPanel1.add(jLabel1);
        jLabel1.setBounds(87, 133, 90, 25);

        jLabel2.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(255, 255, 255));
        jLabel2.setText("MINUTE");
        jPanel1.add(jLabel2);
        jLabel2.setBounds(87, 205, 80, 25);

        jButton1.setText("BACK-UP");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });
        jPanel1.add(jButton1);
        jButton1.setBounds(200, 260, 80, 23);

        jLabel5.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagesandicons/Red Blue & White Remembrance Flower Memorial Day Instagram Post.png"))); // NOI18N
        jPanel1.add(jLabel5);
        jLabel5.setBounds(0, -10, 550, 340);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, 548, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, 331, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        setSize(new java.awt.Dimension(564, 345));
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        BackupTask myTask = new BackupTask();
        try {
            myTask.backupDatabase();
        } catch (Exception ex) {
            Logger.getLogger(it_manager.class.getName()).log(Level.SEVERE, null, ex);
        }
        int hour = Integer.parseInt(jSpinner1.getValue().toString());
        int minute = Integer.parseInt(jSpinner2.getValue().toString());

        if ((hour < 0 || hour >= 24) || (minute < 0 || minute >= 60)) {
            JOptionPane.showMessageDialog(null, "Invalid input. Hour must be between 0 and 23, and minute must be between 0 and 59.");
        } else {
            try {
                String formattedHour = String.format("%02d", hour);
                String formattedMinute = String.format("%02d", minute);

                // Set backup time
                backupTime = formattedHour + ":" + formattedMinute;

                // Store backup time in the database
                storeBackupTimeInDatabase(backupTime);

                // Start or restart the backup timer
                startBackupTimer();

                JOptionPane.showMessageDialog(rootPane, "Backup time set successfully.");
            } catch (SQLException e) {
                JOptionPane.showMessageDialog(rootPane, "SQL Error: " + e.getMessage());
            } catch (Exception e) {
                JOptionPane.showMessageDialog(rootPane, "Error: " + e.getMessage());
            }
        }
    }

    private static void storeBackupTimeInDatabase(String backupTime) throws SQLException {
        Connection con = DriverManager.getConnection("jdbc:mysql://localhost:3306/pos", "root", "Nkoli1510");
        PreparedStatement ps = con.prepareStatement("INSERT INTO backup (backup_time) VALUES (?)");
        ps.setString(1, backupTime);
        int rs = ps.executeUpdate();
        con.close();
    }

    private void startBackupTimer() {
        // Stop existing timer if running
        if (timer != null) {
            timer.cancel();
        }

        // Schedule new timer based on backup time
        timer = new Timer(true);
        timer.scheduleAtFixedRate(new BackupTask(), calculateInitialDelay(), 24 * 60 * 60 * 1000);
    }

    private static long calculateInitialDelay() {
        Calendar calendar = Calendar.getInstance();
        Date currentDate = calendar.getTime();

        // Parse the backup time string to get the hour and minute
        String[] parts = backupTime.split(":");
        int backupHour = Integer.parseInt(parts[0]);
        int backupMinute = Integer.parseInt(parts[1]);

        // Set the backup time on the current date
        calendar.set(Calendar.HOUR_OF_DAY, backupHour);
        calendar.set(Calendar.MINUTE, backupMinute);
        calendar.set(Calendar.SECOND, 0);
        calendar.set(Calendar.MILLISECOND, 0);

        // Check if the backup time has already passed today
        if (calendar.getTime().before(currentDate)) {
            // If it has passed, set it for the next day
            calendar.add(Calendar.DAY_OF_MONTH, 1);
         }
        return calendar.getTimeInMillis() - currentDate.getTime();
    }


    private class BackupTask extends TimerTask {

        @Override
        public void run() {
            try {
                backupDatabase();
                System.out.println("Here");
                JOptionPane.showMessageDialog(null, "Database backup completed at " + new java.util.Date());

            } catch (Exception e) {
                e.printStackTrace();
            }
        }

        private void backupDatabase() throws Exception {
            String desktopPath = System.getProperty("user.home") + "\\Documents";

            String backup = desktopPath + "\\backup.sql";
            try {
                // Build mysqldump command
                ProcessBuilder processBuilder = new ProcessBuilder(
                        "mysqldump",
                        "--host=" + "localhost",
                        "--port=" + "3306",
                        "--user=" + "root",
                        "--password=" + "Nkoli1510",
                        "--databases", "pos",
                        "--result-file=" + backup
                );

                // Execute the command
                Process process = processBuilder.start();
                int exitCode = process.waitFor();

                if (exitCode == 0) {
                    System.out.println("Backup completed successfully.");
                } else {
                    System.out.println("Backup failed. Exit code: " + exitCode);
                }
            } catch (Exception e) {
                System.out.println("Backup failed. Exit code: " + e);
            }
        }

    }//GEN-LAST:event_jButton1ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(it_manager.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(it_manager.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(it_manager.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(it_manager.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new it_manager().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JSpinner jSpinner1;
    private javax.swing.JSpinner jSpinner2;
    // End of variables declaration//GEN-END:variables
}
